# -*- coding: utf-8 -*-
#
# Author: Jörg Schäfer (2010-2020), <jschaefer at fb2.fra-uas.de>
# Frankfurt University of Applied Sciences# FB2, Computer Science and Engineering, Distributed Systems
# 
# For educational purpose only (not necessarily very pythonic) 
# Requires python 3.0 or higher
#
# -----------------------------------------------------------------------------
# Computes growth related to complexity factors
# -----------------------------------------------------------------------------
#

from  math import *

def format(str):
    return str.replace("e-", "\\times 10^{-").replace("e+", "\\times 10^{").replace("'", "")
    
        
growth=(("n", lambda x: x),
    ("n \\log n", lambda x: x*log(x)),
    ("n^2", lambda x: x*x),
    ("2^{\\sqrt(n)}", lambda x: 2**sqrt(x)),
    ("2^n", lambda x: 2**x),
    ("n!",  lambda x: float(factorial(x))))

n = (10, 20, 30, 40, 50)
mips= 10**9
print("%autogenerated from growth.py do not edit!")
for row in growth:
    print("$f(n)=%s$& $%s}$\\cr" % (row[0], "}$&$".join(map(format, ["%.1e'" % x for x in [x/mips for x in list(map(row[1], [float(x) for x in n]))]]))))
