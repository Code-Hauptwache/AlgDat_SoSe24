# -*- coding: utf-8 -*-
#
# Author: Jörg Schäfer (2010-2020), <jschaefer at fb2.fra-uas.de>
# Frankfurt University of Applied Sciences# FB2, Computer Science and Engineering, Distributed Systems
#
# Illustrates the LCS algorithm 
# (see Cormen et al, Introduction to algorithms)
# 
# For educational purpose only (not necessarily very pythonic) 
# Requires python 3.0 or higher
#
# -----------------------------------------------------------------------------
# Input x, y strings LCS to select from 
# -----------------------------------------------------------------------------
#

def lcs_length(x, y):
    m, n = len(x) + 1, len(y) + 1
    c = [[0 for j in range(n)] for i in range(m)]
    b = [["" for j in range(n)] for i in range(m)]
    for i in range(1, m):
        for j in range(1,n):
            if x[i-1] == y[j-1]:
                c[i][j] = c[i-1][j-1] + 1
                b[i][j] = "NW"  # Upleft
            elif c[i-1][j] >= c[i][j-1]:
                c[i][j] = c[i-1][j]
                b[i][j] = "NO"  # Up
            else:
                c[i][j] = c[i][j-1]
                b[i][j] = "WE"  # Left
    return c, b

def back_trace(b, x, i, j):
    if i == 0 or j == 0:
        return ""
    if b[i][j] == "NW":
        return back_trace(b, x, i-1, j-1) + x[i-1]
    elif b[i][j] == "NO":
        return back_trace(b, x, i-1, j)
    else:
        return back_trace(b, x, i, j-1)

def printlcs(b, x, i, j):
    if i == 0 or j == 0:
        return ""
    if b[i][j] == "NW":
        return printlcs(b, x, i-1, j-1) + x[i-1]
    elif b[i][j] == "NO":
        return printlcs(b, x, i-1, j)
    else:
        return printlcs(b, x, i, j-1)

def lcs(x, y):
    c, b = lcs_length(x, y)
    #print (b)
    #print (c)
    return back_trace(b, x, len(x), len(y))
 
# simple routines to generate latex representation of result
def print_latex(x,y):
    print("% ------- begin autogenerated from lcs.py do not edit! -------")
    c, b = lcs_length(x,y)
    b = [list(map(replace, x)) for x in b]
    print_latex_matrix(c, x, y)
    print_latex_matrix(b, x , y)
    # print combined matrix
    print_latex_matrix(list(map( lambda x, y: list(map(lambda z, w: str(z)+w, x, y)), c , b)), x, y)
    print("% ------- end autogenerated from lcs.py do not edit! -------")
    
def print_latex_matrix(m, x, y):
    print("\\begin{tabular}{%s|c|}" % "".join(["|c" for i in range(len(m[0]))]))
    print("\\hline")
    print("&$y_j$&%s\\cr\\hline" % "&".join([str(x) for x in y]))
    print("%s&%s\\cr\\hline" % ("$x_i$", "&".join([str(x) for x in m[0]])))
    for i in range(1, len(m)):
        print("%s&%s\\cr\\hline" % (x[i-1], "&".join([str(x) for x in m[i]])))
    print("\\end{tabular}")

def replace(s):
    return s.replace("NO",  " $\\uparrow$").replace("WE", " $\\leftarrow$").replace("NW", " $\\nwarrow$")    

def print_matrix(m):
    for i in range(len(m)):
        print(m[i])
        
print(lcs("TGCGTCCATT", "ACCGTTGCGTCCAGCTGC"))

print(lcs("ACGT", "AGCTA"))

